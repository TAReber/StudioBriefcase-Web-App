@*
    Episode 3 - Color Management System, Realtime Color Updates
*@
@using StudioBriefcase.Models;
@{

}

<ul class="box-col box-center3 menu-style p3">
    <li class="box-row box-center3 w100">
        <span class="text-sm" style="color:inherit">Color Mode</span>
        <button class="menu-btn menu-btn-size c-fg" onclick="toggleColorScheme(this)" id="color_mode_toggle" data-target="colorscheme">Light</button>
    </li>
    <li class="box-col box-center3 w100">
        @* button class="menu-btn menu-btn-link c-fg" onclick="OpenSettingsPage()"><span class="text-sm" style="color:inherit">Settings</span></button> *@
        <button class="menu-btn menu-btn-link event-toggle c-fg" data-target="user-form"><span class="text-sm" style="color:inherit">Settings</span></button>
    </li>
    <li class="box-row">
        <label class="p2" for="language">Language:</label>
        <select class="zero" name="Language" id="menu-language" onchange="UpdateLanguage()">
            <option value="1">English</option>           
        </select>

    </li>
    @if (User.Identity?.IsAuthenticated == true)
    {
        <li class="box-col box-center3 w100">
            <span class="text-sm" style="color:inherit">@User.FindFirst("role")?.Value</span>
            <span class="text-sm" style="color:inherit">@User.FindFirst("name")?.Value</span>
            @* Dynamic Redirect returnUrl Episode 2 *@
            <a class="menu-btn menu-btn-link text-center w100 c-fg" href="/logout?returnUrl=@Context.Request.Path">Logout</a>
        </li>
    }
    else
    {
        <li class="box-col box-center0 w100">
            <span class="text-sm" style="color:inherit">GitHub OAuth</span>
            @* Dynamic Redirect returnUrl Episode 2 *@
            <a class="menu-btn menu-btn-link text-center w100 c-fg" href="/login?returnUrl=@Context.Request.Path">Login</a>
        </li>
    }
</ul>


<div class="form c-bg" id="user-form">
    <div class="form-content c-fg c-shadow">
        <h5 class="text-center w100 c-fg">User Menu</h5>
        <div class="accordion w100">
            <div class="accordion-item">

                <button class="accordion-toggle c-fg event-toggle text-sm" data-target="menu-color-picker">
                    Advanced Color Mode Panel
                </button>

                <div class="accordion-target-vertical box-col c-fg" id="menu-color-picker">
                    <div class="box-row box-center2">
                        <button class="menu-btn w75 c-fg" onclick="SaveCustomColorScheme()" data-target="colorscheme">Save Colors</button>
                        <button class="menu-btn w75 c-fg" onclick="ClearCustomColorLocalStorage()" data-target="colorscheme">Clear Cache</button>
                    </div>
                    <div id="color_picker_list">
                        <div class="box-row box-center2">
                            <span class="text-sm" style="color:inherit">Background</span>
                            <input type="color" id="color_background" name="--background" value="#eeeeee" oninput="ApplyColor(this)" />
                        </div>
                        <div class="box-row box-center2">
                            <span class="text-sm" style="color:inherit">Foreground</span>
                            <input type="color" id="color_foreground" name="--foreground" value="#cccccc" oninput="ApplyColor(this)" />
                        </div>
                        <div class="box-row box-center2">
                            <span class="text-sm" style="color:inherit">Text Color 1</span>
                            <input type="color" id="color_text-color1" name="--text-color1" value="#000000" oninput="ApplyColor(this)" />
                        </div>
                        <div class="box-row box-center2">
                            <span class="text-sm" style="color:inherit">Text Color 2</span>
                            <input type="color" id="color_text-color2" name="--text-color2" value="#000000" oninput="ApplyColor(this)" />
                        </div>
                        <div class="box-row box-center2">
                            <span class="text-sm" style="color:inherit">Shadow 1</span>
                            <input type="color" id="color_shadow1" name="--shadow1" value="#000000" oninput="ApplyColor(this)" />
                        </div>
                        <div class="box-row box-center2">
                            <span class="text-sm" style="color:inherit">Shadow 2</span>
                            <input type="color" id="color_shadow2" name="--shadow2" value="#cccccc" oninput="ApplyColor(this)" />
                        </div>
                        <div class="box-row box-center2">
                            <span class="text-sm" style="color:inherit">Offset</span>
                            <input type="color" id="color_offset" name="--offset" value="#cccccc" onInput="ApplyColor(this)" />
                        </div>
                        <div class="box-row box-center2">
                            <span class="text-sm" style="color:inherit">Menu Background</span>
                            <input type="color" id="color_menu_background" name="--menu-background" value="#111111" onInput="ApplyColor(this)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (User.Identity?.IsAuthenticated == true)
        {
            <div class="box-col">
                <span>@User.FindFirst("name")</span>
                <span>@User.FindFirst("privilege")</span>
                <a class="icon-btn" href="@User.FindFirst("webpage")?.Value" target="_blank">
                    <img class="icon-square-media" src="@User.FindFirst("picture")?.Value" alt="Github profile Pic" />
                </a>
                <span>@User.FindFirst("class")</span>

            </div>

            <select id="Menu_RoleDropdown">
                <option value="Private">Private</option>
                <option value="Student">Student</option>
                <option value="Teacher">Teacher</option>
                <option value="Educator">Educator</option>
                <option value="Professional">Professional</option>
                <option value="Researcher">Researcher</option>
                <option value="Content Creator">Content Creator</option>
            </select>

            <button class="" type="button" onclick="updateUserRole(event)"><span class="text-sm" style="color:inherit">Apply</span></button>
        }

    </div>
    <div class="form-background event-toggle" data-target="user-form" />

</div>

<script>

    // const localStorage_Language = 'user_language';

    // function UpdateLanguage() {
    //     let selection = document.getElementById("menu-language").value;
    //     localStorage.setItem(localStorage_Language, selection);

    //     let LibraryLinks = document.querySelectorAll("#language-parameter");
    //     LibraryLinks.forEach(function (link) {
    //         link.href = link.href + '?Language=' + selection;
            
    //     });

    // }

    // document.addEventListener("DOMContentLoaded", () => {

    //     let language_selection = localStorage.getItem(localStorage_Language);
    //     if (language_selection != null) {
    //         document.getElementById("menu-language").value = language_selection;
    //     }
    //     else { //default settings to English, value 1
    //         document.getElementById("menu-language").value = 'English';
    //     }

    // });


    function updateUserRole(event) {
        event.stopPropagation();

        var selectedRole = document.getElementById('Menu_RoleDropdown').value;
        var userId = "test";

        fetch('/api/user/UpdateUserClass', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                Id: userId,
                userClass: selectedRole
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error("Fetch Operation failed in _menuPartial.cshtml:", error);
            });
    }


</script>


