@{
    Layout = "_Layout.cshtml";
    /*Style Sheet Uses ASP.NET feature called CSS Isolation. */
    <link rel="stylesheet" href="~/@(nameof(StudioBriefcase)).styles.css" />
    string? thisDirectory = System.IO.Path.GetDirectoryName(Context.Request.Path);
    string[] folders = thisDirectory!.Split('\\');
    string Category = folders[folders.Length - 3];
    string library = folders[folders.Length - 2];
    string subject = folders[folders.Length - 1];   
    string topic = System.IO.Path.GetFileNameWithoutExtension(Context.Request.Path);
}

<head>
    <link rel="stylesheet" href="~/css/LibraryStyles/@(library).css" />
</head>

<main class="box-row me-grow1 w100 c-bg" style="overflow:hidden">

    <div class="box-row h100">
        <div class="box-row c-fg expanded" id="sublayout-sidebar-navigator">
            <div class="sublayout-sidebar-scrollbar">
                <h6 class="sublayout-link-title">@(library) Links</h6>

                @{
                    /* Calls a function in ViewCoponents/LibraryLinkViewComponent.cs using dependency injection */
                }
                @await Component.InvokeAsync("LibraryLinks", new { libraryName = @library })
                @if (User.Identity?.IsAuthenticated == true && (String.Equals(User.FindFirst("privilege")?.Value, "Admin", StringComparison.OrdinalIgnoreCase) || String.Equals(User.FindFirst("privilege")?.Value, "Moderator", StringComparison.OrdinalIgnoreCase)))
                {
                    <button class="event-toggle w100" data-target="librarylinks-form">Update Links</button>
                }

                @* Create a ViewComponent for Users Library Preferences here *@
                <form class=" box-col" id="HiddenLibraryPath">
                    <input type="hidden" name="Category" id="PageCategory" value="@Category" />
                    <input type="hidden" name="Library" id="PageLibrary" value="@library" />
                    <input type="hidden" name="Subject" id="PageSubject" value="@subject" />
                    <input type="hidden" name="Topic" id="PageTopic" value="@topic" />
                </form>

                <div class="accordion w100">
                    <div class="accordion-item w100">
                        <button class="event-toggle w100" data-target="navigation-Parameters">
                            Post Filter Settings
                        </button>
                        <div class="accordion-target-vertical" id="navigation-Parameters">
                            <div class="box-row">
                                <label class="p2" for="language">Language:</label>
                                <select class="zero" name="Language" id="submissionForm-language">
                                    <option value="1">English</option>
                                </select>

                            </div>
                            @await Component.InvokeAsync("LibraryTags")
                        </div>
                    </div>
                </div>
                
                <div class="p2"></div>
                @await Component.InvokeAsync("LibraryNavigation", new { path = @thisDirectory })

                <div class="whitespace"></div>
            </div>
        </div>
        <div class="h100 m2">
            <button class="sublayout-sidebar-toggle c-fg event-toggle" data-target="sublayout-sidebar-navigator">I</button>
        </div>
    </div>

    <div class="box-row box-justify0 w100 h100" style="overflow:auto;">
        <div class="box-col box-w100-margin w75">
            @RenderBody()
        </div>

    </div>


</main>

@* Button that allows admins and moderators to update the quicklinks in the library sublayout *@
@if (User.Identity?.IsAuthenticated == true && (String.Equals(User.FindFirst("privilege")?.Value, "Admin", StringComparison.OrdinalIgnoreCase) || String.Equals(User.FindFirst("privilege")?.Value, "Moderator", StringComparison.OrdinalIgnoreCase)))
{
    <div class="form" id="librarylinks-form">
        <div class="form-content c-bg show">
            <div class="box-row">
                <button onclick="updateLibraryLinks()" id="updateLinksButton">Update Links</button>
                <button id="not implemented">cancel not implemented</button>
            </div>
            @await Component.InvokeAsync("LibraryLinks", new { libraryName = @library, switchvalue = 1 }));
        </div>
        <div class="form-background event-toggle" data-target="librarylinks-form"></div>
    </div>
}

@* Target location insert render html forms that allow users to manage posts in the database. *@
@if(User.Identity?.IsAuthenticated == true)
{
    <div id="UserPostManagerLocation">

    </div>
}


<script>
    document.addEventListener('DOMContentLoaded', () => {
        ToggleExpanded('@subject');
    });

    function updateLibraryLinks(event) {
        //console.log("The javascript updateLibraryLinks function was called");

        let item = [];
        let inputFields = document.querySelectorAll(".link-input");
        let objects = [];

        inputFields.forEach((input) => {
            let propertyName = input.getAttribute('data-property');
            item.push(input.value);
        });

        for (let i = 0; i < 5; i++) {
            if (item[0 + (i * 3)] != "null" && item[0 + (i * 3)] != "null") {

                let object = {
                    SiteUrl: item[0 + (i * 3)],
                    ImgSource: item[1 + (i * 3)],
                    ShorthandDesc: item[2 + (i * 3)]
                }

                objects.push(object);
            }

        };

        //After Objects Created, I needed to create a model to store the string in and pass in the parameters.
        fetch('/library/SetLibraryQuickLinks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                LibraryName: '@library',
                JsonString: JSON.stringify(objects)
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json();
            }).then(data => {
                console.log(data);
                //location.reload();
            }).catch(error => {
                console.error("Fetch Operation Failed to update library links in _subLayout_Library.cshtml", error);
            })
    }

</script>

@section Scripts {
    <script src="~/scripts/GlobalLibraryFunctions.js"></script>
    <Script src="~/scripts/library/Vulkan.js"></Script>
}